{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"src/images/about/alipay.jpg","path":"images/about/alipay.jpg","modified":1,"renderable":0},{"_id":"src/images/about/weixin.jpg","path":"images/about/weixin.jpg","modified":1,"renderable":0},{"_id":"themes/blank/source/css/benchmark.styl","path":"css/benchmark.styl","modified":1,"renderable":1},{"_id":"themes/blank/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/blank/source/css/page.styl","path":"css/page.styl","modified":1,"renderable":1},{"_id":"themes/blank/source/css/search.styl","path":"css/search.styl","modified":1,"renderable":1},{"_id":"themes/blank/source/images/bg.jpg","path":"images/bg.jpg","modified":1,"renderable":1},{"_id":"themes/blank/source/images/check.png","path":"images/check.png","modified":1,"renderable":1},{"_id":"themes/blank/source/images/down.png","path":"images/down.png","modified":1,"renderable":1},{"_id":"themes/blank/source/images/feed.png","path":"images/feed.png","modified":1,"renderable":1},{"_id":"themes/blank/source/images/github-black.png","path":"images/github-black.png","modified":1,"renderable":1},{"_id":"themes/blank/source/images/github-white.png","path":"images/github-white.png","modified":1,"renderable":1},{"_id":"themes/blank/source/images/menu-white.png","path":"images/menu-white.png","modified":1,"renderable":1},{"_id":"themes/blank/source/images/icons.png","path":"images/icons.png","modified":1,"renderable":1},{"_id":"themes/blank/source/images/menu.png","path":"images/menu.png","modified":1,"renderable":1},{"_id":"themes/blank/source/images/search.png","path":"images/search.png","modified":1,"renderable":1},{"_id":"themes/blank/source/js/common.js","path":"js/common.js","modified":1,"renderable":1},{"_id":"themes/blank/source/js/css.escape.js","path":"js/css.escape.js","modified":1,"renderable":1},{"_id":"themes/blank/source/js/smooth-scroll.min.js","path":"js/smooth-scroll.min.js","modified":1,"renderable":1},{"_id":"src/images/about/blank.jpg","path":"images/about/blank.jpg","modified":1,"renderable":0},{"_id":"themes/blank/source/js/vue.min.js","path":"js/vue.min.js","modified":1,"renderable":1},{"_id":"themes/blank/source/js/vue.js","path":"js/vue.js","modified":1,"renderable":1}],"Cache":[{"_id":"src/.DS_Store","hash":"b48c4f7d61a5928be717d4bd654481ff1eab36ee","modified":1508939004000},{"_id":"src/index.md","hash":"e1826187270c0c6c6cc79664a975c27f31e736fc","modified":1509105427000},{"_id":"themes/blank/.DS_Store","hash":"0bbbd6db6699b53d330d7ba4afddb1f1b76ed211","modified":1508992119000},{"_id":"themes/blank/_config.yml","hash":"138a4f6959e6a8247aa5800ba4351b39c73b329d","modified":1509094760000},{"_id":"src/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1508939004000},{"_id":"src/about/donate.md","hash":"0158254c5bd55b12a603763dadedd726e8c32dfa","modified":1509094760000},{"_id":"src/about/index.md","hash":"be04e7967b52d3c0b2ccced99b9d9afa1adcbd4f","modified":1509094760000},{"_id":"src/android/index.md","hash":"a45dc33d65c728afd73b677dc322360849fae0b5","modified":1509094760000},{"_id":"src/fairygui/index.md","hash":"276881ef9ad92ca295bcd19357d97c17edc82521","modified":1509094760000},{"_id":"src/images/.DS_Store","hash":"3e26eebdcb0552b32c821edfbfba141e18828fb6","modified":1509091979000},{"_id":"src/ios/index.md","hash":"9da43d117edfca93330dec12495ff600d3a8ae48","modified":1509094760000},{"_id":"src/unity/Test.md","hash":"c3ce1bc435ff45855f8fd299129cb05e741a66f6","modified":1509094760000},{"_id":"src/unity/Unity Shader CG Standard function library.md","hash":"7725d1ac4ffdf8f1d85488f245abe7a475e54292","modified":1511869603000},{"_id":"src/unity/index.md","hash":"6e522a921c68621ce6540aaa58a0ef3bfa013887","modified":1509094760000},{"_id":"src/vuforia/index.md","hash":"7eb21a1ac77c4223a4060184f3df2661c5335401","modified":1509094760000},{"_id":"src/vuforia/test.md","hash":"607a5851abea60d0bfade16be9a1f03ee83a5c90","modified":1509094760000},{"_id":"themes/blank/layout/index.ejs","hash":"cf5df7ade6cd7147cfac3d637aa1a251a27a52cc","modified":1509094760000},{"_id":"themes/blank/layout/layout.ejs","hash":"50c2d3b3e857b9284b1952d2db7ebf97748e3f1a","modified":1509094760000},{"_id":"themes/blank/layout/page.ejs","hash":"bd723cf0d95fbbe3c013e90b2dec6c4e5c42eca4","modified":1509106181000},{"_id":"themes/blank/layout/post.ejs","hash":"206faa4e4944eb092c9b9706c81131a46be6d2be","modified":1509094760000},{"_id":"src/images/about/alipay.jpg","hash":"f34a0f6e28f2841acb04082b5bb5104c20d456f9","modified":1509094760000},{"_id":"src/images/about/weixin.jpg","hash":"640676d237aad97f5bfbab51a3ee4a75984a0647","modified":1509094760000},{"_id":"themes/blank/layout/partials/header.ejs","hash":"370bdc212769ad4fa8c8aa042a42434a2129d396","modified":1509106817000},{"_id":"themes/blank/layout/partials/main_menu.ejs","hash":"38c9854660ce9fe72d2dfbadaa890dad338d2d3c","modified":1509094760000},{"_id":"themes/blank/layout/partials/sidebar.ejs","hash":"9a590d77355b158c13eface632d78a2ff54e7199","modified":1509106535000},{"_id":"themes/blank/layout/partials/sponsors.ejs","hash":"2e20a4fc7d220f8d226ebbdea41917aee3767c0b","modified":1509094760000},{"_id":"themes/blank/source/css/_common.styl","hash":"df9644a584a30e23aa8bd094c272e53d1ba79e9b","modified":1509094760000},{"_id":"themes/blank/source/css/_demo.styl","hash":"21a1a05638723cd8554562fb35f910418d3515bc","modified":1509094760000},{"_id":"themes/blank/source/css/_header.styl","hash":"56a9f689666ceebb32da84d99882a16b82c35a26","modified":1509094760000},{"_id":"themes/blank/source/css/_migration.styl","hash":"6957759d62791edf2e6e2e8a9e026bb25492d159","modified":1509094760000},{"_id":"themes/blank/source/css/_settings.styl","hash":"26610e275ff8f65df39061dab9627eddbad00712","modified":1509094760000},{"_id":"themes/blank/source/css/_sidebar.styl","hash":"4ac362aa2ca2c100efe787b033e5cf7927c6ca02","modified":1509094760000},{"_id":"themes/blank/source/css/_sponsor.styl","hash":"6a4e1503b1e4f0e98e1e008ba846036fee3199aa","modified":1509094760000},{"_id":"themes/blank/source/css/_syntax.styl","hash":"edb004001fe151bebfdf63bbc250ba75777b5468","modified":1509094760000},{"_id":"themes/blank/source/css/benchmark.styl","hash":"95d4607b2b59623a673e131e1a267d0311fe89e6","modified":1509094760000},{"_id":"themes/blank/source/css/index.styl","hash":"f96a9e1a52e1b6c80f30b90689ca4f3156b38025","modified":1509107120000},{"_id":"themes/blank/source/css/page.styl","hash":"b5c1ebf3fa22840490d34c05d79051137b0b4484","modified":1509094760000},{"_id":"themes/blank/source/css/search.styl","hash":"5117f05598154cfc84da04ec1a257bd186653ba2","modified":1509094760000},{"_id":"themes/blank/source/images/bg.jpg","hash":"1d0ce3121c647f3a0e2eac6915d26ae81c04c2f2","modified":1509094760000},{"_id":"themes/blank/source/images/check.png","hash":"63c871d2b373b77c72349170f5ef426e0d1cd09b","modified":1509094760000},{"_id":"themes/blank/source/images/down.png","hash":"199cae4696850c6f7420c2706c6f4786e03c396c","modified":1509094760000},{"_id":"themes/blank/source/images/feed.png","hash":"40639090cfeac0a5ac5d92c5c1b3702c95a50a9e","modified":1509094760000},{"_id":"themes/blank/source/images/github-black.png","hash":"b00f47d766170d5814e4a1270a3c534642923207","modified":1509094760000},{"_id":"themes/blank/source/images/github-white.png","hash":"a897bfa37a683b8d622fdf93f5535654350d83a1","modified":1509094760000},{"_id":"themes/blank/source/images/menu-white.png","hash":"56c7731a4c8189f85f76ce45900dd6a5d4b61b68","modified":1509094760000},{"_id":"themes/blank/source/images/icons.png","hash":"f37248aa22ed3dc4bddefbd9499e5e68ce41a3a1","modified":1509094760000},{"_id":"themes/blank/source/images/menu.png","hash":"3e2ba61af1ab5350ffbf0fecaf882f3bfa364ca3","modified":1509094760000},{"_id":"themes/blank/source/images/search.png","hash":"4546e84b0067609c3fa3c59358c68bf82ebc03a4","modified":1509094760000},{"_id":"themes/blank/source/js/common.js","hash":"74f79cb3a8d5b51c1aa67146e1ecee2b2cc9e04d","modified":1509094760000},{"_id":"themes/blank/source/js/css.escape.js","hash":"1d0e28a08261de3955b0ee18432e304c1f468441","modified":1509094760000},{"_id":"themes/blank/source/js/smooth-scroll.min.js","hash":"48d800d2b3be86c704e002502999413504bbd04d","modified":1509094760000},{"_id":"src/images/about/blank.jpg","hash":"7f817be671f59153dae5c7cbfd9d340dd435f392","modified":1509094760000},{"_id":"themes/blank/source/js/vue.min.js","hash":"c662b6971e444c5e4181aeb8b800213d32dbec47","modified":1509094760000},{"_id":"themes/blank/source/js/vue.js","hash":"a7aefd7853b02b307f59bc8ec8d1ef79227b7fd1","modified":1509094760000},{"_id":"public/index.html","hash":"a507ed045d1630b9647b38807b2c86d7581e2a97","modified":1511869706283},{"_id":"public/about/donate.html","hash":"d6c95a4727fd96ea06ae53c8165aa33a446a612a","modified":1511869706283},{"_id":"public/about/index.html","hash":"3cad61251c1ea35fb00f5a7b0e75ae5f655956f0","modified":1511869706283},{"_id":"public/android/index.html","hash":"3763093a42ed2873447584971f358bbbb0fe73f3","modified":1511869706284},{"_id":"public/fairygui/index.html","hash":"83d2633880028279f6a3ec8b8386394c96ea8d08","modified":1511869706284},{"_id":"public/ios/index.html","hash":"3830d32c96ee477dbf067014c9d56a64f3804f52","modified":1511869706284},{"_id":"public/unity/Test.html","hash":"43a9fa162a42df5f14454f2f4975b3d1a1d4e237","modified":1511869706284},{"_id":"public/unity/index.html","hash":"7e74f5d5b79e98783a7f0f823474dd07be8629bb","modified":1511869706284},{"_id":"public/vuforia/index.html","hash":"610191c1e9c2e886c75d97cf36bef274590bda0c","modified":1511869706284},{"_id":"public/vuforia/test.html","hash":"486d8ea12bb761d19bdeae018adb2e4ac05daac2","modified":1511869706284},{"_id":"public/unity/Unity Shader CG Standard function library.html","hash":"304bb9ebc93ae301552c8a26c56c908eb5d334d2","modified":1511869706284},{"_id":"public/images/about/alipay.jpg","hash":"f34a0f6e28f2841acb04082b5bb5104c20d456f9","modified":1511869706288},{"_id":"public/images/about/weixin.jpg","hash":"640676d237aad97f5bfbab51a3ee4a75984a0647","modified":1511869706288},{"_id":"public/images/bg.jpg","hash":"1d0ce3121c647f3a0e2eac6915d26ae81c04c2f2","modified":1511869706288},{"_id":"public/images/check.png","hash":"63c871d2b373b77c72349170f5ef426e0d1cd09b","modified":1511869706288},{"_id":"public/images/down.png","hash":"199cae4696850c6f7420c2706c6f4786e03c396c","modified":1511869706288},{"_id":"public/images/feed.png","hash":"40639090cfeac0a5ac5d92c5c1b3702c95a50a9e","modified":1511869706288},{"_id":"public/images/github-black.png","hash":"b00f47d766170d5814e4a1270a3c534642923207","modified":1511869706288},{"_id":"public/images/github-white.png","hash":"a897bfa37a683b8d622fdf93f5535654350d83a1","modified":1511869706288},{"_id":"public/images/menu-white.png","hash":"56c7731a4c8189f85f76ce45900dd6a5d4b61b68","modified":1511869706288},{"_id":"public/images/icons.png","hash":"f37248aa22ed3dc4bddefbd9499e5e68ce41a3a1","modified":1511869706288},{"_id":"public/images/menu.png","hash":"3e2ba61af1ab5350ffbf0fecaf882f3bfa364ca3","modified":1511869706289},{"_id":"public/images/search.png","hash":"4546e84b0067609c3fa3c59358c68bf82ebc03a4","modified":1511869706289},{"_id":"public/images/about/blank.jpg","hash":"7f817be671f59153dae5c7cbfd9d340dd435f392","modified":1511869706737},{"_id":"public/css/benchmark.css","hash":"3424ee8c27052da2ab9f544027f49e1550385e9d","modified":1511869706743},{"_id":"public/css/search.css","hash":"05bfd9d1fa37c0525f0a6028e4b84476ba816b7b","modified":1511869706743},{"_id":"public/js/common.js","hash":"74f79cb3a8d5b51c1aa67146e1ecee2b2cc9e04d","modified":1511869706743},{"_id":"public/js/css.escape.js","hash":"1d0e28a08261de3955b0ee18432e304c1f468441","modified":1511869706743},{"_id":"public/js/smooth-scroll.min.js","hash":"48d800d2b3be86c704e002502999413504bbd04d","modified":1511869706743},{"_id":"public/css/index.css","hash":"aeeeb47612880a6e0bbea0c43a87e36798899350","modified":1511869706743},{"_id":"public/css/page.css","hash":"fab7488612f0dad2d0103dc3f257a0bd19554c5c","modified":1511869706743},{"_id":"public/js/vue.min.js","hash":"c662b6971e444c5e4181aeb8b800213d32dbec47","modified":1511869706743},{"_id":"public/js/vue.js","hash":"a7aefd7853b02b307f59bc8ec8d1ef79227b7fd1","modified":1511869706743}],"Category":[],"Data":[],"Page":[{"layout":"index","index":true,"_content":"\n","source":"index.md","raw":"---\nlayout: index\nindex: true\n---\n\n","date":"2017-10-27T11:57:07.000Z","updated":"2017-10-27T11:57:07.000Z","path":"index.html","title":"","comments":1,"_id":"cjajk6r5600002t6uqs214rps","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"打赏/赞助","type":"about","order":1,"_content":"\n# 打赏 纯属自愿 \n<table>\n    <td>![](../images/about/weixin.jpg)</td>\n    <td>![](../images/about/alipay.jpg)</td>\n</table>\n","source":"about/donate.md","raw":"---\ntitle: 打赏/赞助\ntype: about\norder: 1\n---\n\n# 打赏 纯属自愿 \n<table>\n    <td>![](../images/about/weixin.jpg)</td>\n    <td>![](../images/about/alipay.jpg)</td>\n</table>\n","date":"2017-10-27T11:33:41.000Z","updated":"2017-10-27T08:59:20.000Z","path":"about/donate.html","comments":1,"layout":"page","_id":"cjajk6r5p00012t6u60455nf9","content":"<h1 id=\"打赏-纯属自愿\"><a href=\"#打赏-纯属自愿\" class=\"headerlink\" title=\"打赏 纯属自愿\"></a>打赏 纯属自愿</h1><table><br>    <td><img src=\"../images/about/weixin.jpg\" alt=\"\"></td><br>    <td><img src=\"../images/about/alipay.jpg\" alt=\"\"></td><br></table>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"打赏-纯属自愿\"><a href=\"#打赏-纯属自愿\" class=\"headerlink\" title=\"打赏 纯属自愿\"></a>打赏 纯属自愿</h1><table><br>    <td><img src=\"../images/about/weixin.jpg\" alt=\"\"></td><br>    <td><img src=\"../images/about/alipay.jpg\" alt=\"\"></td><br></table>\n"},{"layout":"page","title":"about","date":"2017-10-25T13:30:03.000Z","tags":null,"order":0,"type":"about","_content":"\n# 这里写什么? \n\n# 我不知道啊 \n\n\n#  你说写什么好呢?\n","source":"about/index.md","raw":"---\nlayout: page\ntitle: about\ndate: 2017-10-25 21:30:03\ntags:\norder: 0\ntype: about\n---\n\n# 这里写什么? \n\n# 我不知道啊 \n\n\n#  你说写什么好呢?\n","updated":"2017-10-27T08:59:20.000Z","path":"about/index.html","comments":1,"_id":"cjajk6r5q00022t6u534lxofj","content":"<h1 id=\"这里写什么\"><a href=\"#这里写什么\" class=\"headerlink\" title=\"这里写什么?\"></a>这里写什么?</h1><h1 id=\"我不知道啊\"><a href=\"#我不知道啊\" class=\"headerlink\" title=\"我不知道啊\"></a>我不知道啊</h1><h1 id=\"你说写什么好呢\"><a href=\"#你说写什么好呢\" class=\"headerlink\" title=\"你说写什么好呢?\"></a>你说写什么好呢?</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"这里写什么\"><a href=\"#这里写什么\" class=\"headerlink\" title=\"这里写什么?\"></a>这里写什么?</h1><h1 id=\"我不知道啊\"><a href=\"#我不知道啊\" class=\"headerlink\" title=\"我不知道啊\"></a>我不知道啊</h1><h1 id=\"你说写什么好呢\"><a href=\"#你说写什么好呢\" class=\"headerlink\" title=\"你说写什么好呢?\"></a>你说写什么好呢?</h1>"},{"layout":"page","date":"2017-10-25T13:35:52.000Z","tags":null,"type":"android","order":0,"_content":"","source":"android/index.md","raw":"---\nlayout: page\ndate: 2017-10-25 21:35:52\ntags:\ntype: android\norder: 0\n---\n","updated":"2017-10-27T08:59:20.000Z","path":"android/index.html","title":"","comments":1,"_id":"cjajk6r5s00032t6ulz7hd60e","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"page","title":"fairygui","date":"2017-10-25T13:35:00.000Z","tags":null,"type":"fairygui","order":0,"_content":"","source":"fairygui/index.md","raw":"---\nlayout: page\ntitle: fairygui\ndate: 2017-10-25 21:35:00\ntags:\ntype: fairygui\norder: 0\n---\n","updated":"2017-10-27T08:59:20.000Z","path":"fairygui/index.html","comments":1,"_id":"cjajk6r5u00042t6u7oijsp2y","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"page","date":"2017-10-25T13:35:58.000Z","tags":null,"type":"ios","order":0,"_content":"","source":"ios/index.md","raw":"---\nlayout: page\ndate: 2017-10-25 21:35:58\ntags:\ntype: ios\norder: 0\n---\n","updated":"2017-10-27T08:59:20.000Z","path":"ios/index.html","title":"","comments":1,"_id":"cjajk6r5v00052t6u0h3miq5t","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"page","title":"unity  Test","date":"2017-10-25T13:35:17.000Z","tags":null,"type":"unity","order":1,"_content":"\n\naaaaaaa\n## dsas\n\ndasd \n\n## dfas三肯将空间看扫蛋壳框架\n\ndasfgas\n\n# hjfdjshjdshj","source":"unity/Test.md","raw":"---\nlayout: page\ntitle: unity  Test\ndate: 2017-10-25 21:35:17\ntags:\ntype: unity\norder: 1\n---\n\n\naaaaaaa\n## dsas\n\ndasd \n\n## dfas三肯将空间看扫蛋壳框架\n\ndasfgas\n\n# hjfdjshjdshj","updated":"2017-10-27T08:59:20.000Z","path":"unity/Test.html","comments":1,"_id":"cjajk6r5v00062t6u9mqv68j6","content":"<p>aaaaaaa</p>\n<h2 id=\"dsas\"><a href=\"#dsas\" class=\"headerlink\" title=\"dsas\"></a>dsas</h2><p>dasd </p>\n<h2 id=\"dfas三肯将空间看扫蛋壳框架\"><a href=\"#dfas三肯将空间看扫蛋壳框架\" class=\"headerlink\" title=\"dfas三肯将空间看扫蛋壳框架\"></a>dfas三肯将空间看扫蛋壳框架</h2><p>dasfgas</p>\n<h1 id=\"hjfdjshjdshj\"><a href=\"#hjfdjshjdshj\" class=\"headerlink\" title=\"hjfdjshjdshj\"></a>hjfdjshjdshj</h1>","site":{"data":{}},"excerpt":"","more":"<p>aaaaaaa</p>\n<h2 id=\"dsas\"><a href=\"#dsas\" class=\"headerlink\" title=\"dsas\"></a>dsas</h2><p>dasd </p>\n<h2 id=\"dfas三肯将空间看扫蛋壳框架\"><a href=\"#dfas三肯将空间看扫蛋壳框架\" class=\"headerlink\" title=\"dfas三肯将空间看扫蛋壳框架\"></a>dfas三肯将空间看扫蛋壳框架</h2><p>dasfgas</p>\n<h1 id=\"hjfdjshjdshj\"><a href=\"#hjfdjshjdshj\" class=\"headerlink\" title=\"hjfdjshjdshj\"></a>hjfdjshjdshj</h1>"},{"layout":"page","title":"unity Shader CG 标准函数库","date":"2017-11-28T11:46:23.000Z","tags":"Shader","type":"unity","order":30,"_content":"\n# Unity CG 函数\n\n\n\n# 数学函数（Mathematical Functions）\n\n>  abs(x)\t\n>>  返回输入参数的绝对值\n\n>  acos(x)\t\n>>  反余切函数，输入参数范围为[-1,1]， 返回[0,π]区间的角度值\n\n>  all(x)\t\n>>  如果输入参数均不为0，则返回ture； 否则返回flase。&&运算\n\n>  any(x)\t\n>>  输入参数只要有其中一个不为0，则返回true。\n\n>  asin(x)\t\n>>  反正弦函数,输入参数取值区间为[−1,1]，返回角度值范围为, [−π2,π2]\n\n>  atan(x)\t\n>>  反正切函数，返回角度值范围为[−π2,π2]\n\n>  atan2(y,x)\t\n>>  计算y/x的反正切值。实际上和atan(x)函数功能完全一样，至少输入参数不同。atan(x) = atan2(x, float(1))。\n\n>  ceil(x)\t\n>>  对输入参数向上取整。例如： ceil(float(1.3)) ，其返回值为2.0\n\n>  clamp(x,a,b)\t\n>>  如果x值小于a，则返回a；如果x值大于b，返回b；\t否则，返回x。\n\n>  cos(x)\t\n>>  返回弧度x的余弦值。返回值范围为[−1,1]\n\n>  cosh(x)\t\n>>  双曲余弦（hyperbolic cosine）函数，计算x的双曲余弦值。\n\n>  cross(A,B)\t\n>>  返回两个三元向量的叉积(cross product)。注意，输入参数必须是三元向量！\n\n>  degrees(x)\t\n>>  输入参数为弧度值(radians)，函数将其转换为角度值(degrees)\n\n>  determinant(m)\t\n>>  计算矩阵的行列式因子。\n\n>  dot(A,B)\t\n>>  返回A和B的点积(dot product)。参数A和B可以是标量，也可以是向量（输入参数方面，点积和叉积函数有很大不同）。\n\n>  exp(x)\t\n>>  计算ex的值，e=2.71828182845904523536\n\n>  exp2(x)\t\n>>  计算2x的值\n\n>  floor(x)\t\n>>  对输入参数向下取整。例如floor(float(1.3))返回的值为1.0；但是floor(float(-1.3))返回的值为-2.0。该函数与ceil(x)函数相对应。\n\n>  fmod(x,y)\t\n>>  返回x/y的余数。如果y为0，结果不可预料。\n\n>  frac(x)\t\n>>  返回标量或矢量的小数\n\n>  frexp(x, out i)\t\n>>  将浮点数x分解为尾数和指数，即x=m∗2i， 返回m，并将指数存入i中；如果x为0，则尾数和指数都返回0\n\n>  isfinite(x)\t\n>>  判断标量或者向量中的每个数据是否是有限数，如果是返回true；否则返回false;\n\n>  isinf(x)\t\n>>  判断标量或者向量中的每个数据是否是无限，如果是返回true；否则返回false;\n\n>  isnan(x)\t\n>>  判断标量或者向量中的每个数据是否是非数据(not-a-number NaN)，如果是返回true；否则返回false;\n\n>  ldexp(x, n)\t\n>>  计算x∗2n的值\n\n>  lerp(a, b, f)\t\n>>  计算(1−f)∗a+b∗f或者a+f∗(b−a)的值。即在下限a和上限b之间进行插值，f表示权值。注意，如果a和b是向量，则权值f必须是标量或者等长的向量。\n\n>  lit(NdotL, NdotH, m)\t\n>>  N表示法向量；\n>\n>>  L表示入射光向量；\n>\n>>  H表示半角向量；\n>\n>>  m表示高光系数。 \n>\n>>  函数计算环境光、散射光、镜面光的贡献，返回的4元向量。 \n>\n>>  X位表示环境光的贡献，总是1.0; \n>\n>>  Y位代表散射光的贡献，如果 N∙L<0，则为0；否则为N∙L \n>\n>>  Z位代表镜面光的贡献，如果N∙L<0 或者N∙H<0，则位0；否则为(N∙L)m;\n>\n>>  W位始终位1.0\n\n>  log(x)\t\n>>  计算ln(x)的值，x必须大于0\n\n>  log2(x)\t\n>>  计算log(x)2的值，x必须大于0\n\n>  log10(x)\t\n>>  计算log(x)10的值，x必须大于0\n\n>  max(a, b)\t\n>>  比较两个标量或等长向量元素，返回最大值。\n\n>  min(a,b)\t\n>>  比较两个标量或等长向量元素，返回最小值。\n\n>  modf(x, out ip)\t\n>>  把x分解成整数和分数两部分，每部分都和x有着相同的符号，整数部分被保存在ip中，分数部分由函数返回\n\n>  mul(M, N)\t\n>>  矩阵M和矩阵N的积，计算方法如下\n>>  ![mul(M,N)](https://www.github.com/AlianBlank/githubimgoss/raw/shader-imgs-oss/StoryWriter/mul(M,N).jpg)\n\n>  mul(M, v)\t\n>>  矩阵M和列向量v的积，公式如下\n>>  ![mul(M,v)](https://www.github.com/AlianBlank/githubimgoss/raw/shader-imgs-oss/StoryWriter/mul(M,v).jpg)\n\n>  mul(v, M)\t\n>>  行向量v和矩阵M的积，公式如下\n>>  ![mul(v,M)](https://www.github.com/AlianBlank/githubimgoss/raw/shader-imgs-oss/StoryWriter/mul(v,M).jpg)\n\n>  noise(x)\t\n>>  根据它的参数类型，这个函数可以是一元、二元或三元噪音函数。返回的值在0和1之间，并且通常与给定的输入值一样\n\n>  pow(x, y)\t\n>>  xy\n\n>  radians(x)\t\n>>  函数将角度值转换为弧度值\n\n>  round(x)\t\n>>  返回四舍五入值。\n\n>  rsqrt(x)\t\n>>  x的平方根的倒数，x必须大于0\n\n>  saturate(x)\t\n>>  把x限制到[0,1]之间\n\n>  sign(x)\t\n>>  如果x>0则返回1；否则返回0\n\n>  sin(x)\t\n>>  输入参数为弧度，计算正弦值，返回值范围 为[-1,1]\n\n>  sincos(float x, out s, out c)\t\n>>  该函数是同时计算x的sin值和cos值，其中s=sin(x)，c=cos(x)。该函数用于“同时需要计算sin值和cos值的情况”，比分别运算要快很多!\n\n>  sinh(x)\t\n>>  计算x的双曲正弦\n\n>  smoothstep(min, max, x)\t\n>>  值x位于min、max区间中。如果x=min，返回0；如果x=max，返回1；如果x在两者之间，\n>\n>>  按照下列公式返回数据：\n−2∗(x−minmax−min)3+3∗(x−minmax−min)2\n\n>  step(a, x)\t\n>>  如果x<a，返回0；否则，返回1\n\n>  sqrt(x)\t\n>>  求x的平方根，x√，x必须大于0\n\n>  tan(x)\t\n>>  计算x正切值\n\n>  tanh(x)\t\n>>  计算x的双曲线切线\n\n>  transpose(M)\t\n>>  矩阵M的转置矩阵\n如果M是一个AxB矩阵，M的转置是一个BxA矩阵，它的第一列是M的第一行，第二列是M的第二行，第三列是M的第三行，等等\n\n\n# 几何函数(Geometric Functions)\n\n>  distance(pt1, pt2)\t\n>>  两点之间的欧几里德距离（Euclidean distance）\n\n>  faceforward(N,I,Ng)\t\n>>  如果Ng∙I<0，返回N；否则返回-N。\n\n>  length(v)\t\n>>  返回一个向量的模，即sqrt(dot(v,v))\n\n>  normalize(v)\t\n>>  返回v向量的单位向量\n\n>  reflect(I, N)\t\n>>  根据入射光纤方向I和表面法向量N计算反射向量，仅对三元向量有效\n\n>  refract(I,N,eta)\t\n>>  根据入射光线方向I，表面法向量N和折射相对系数eta,计算折射向量。如果对给定的eta,I和N之间的角度太大，返回(0,0,0)。\n只对三元向量有效\n\n\n# 纹理映射函数(Texture Map Functions)\n\n>  tex1D(sampler1D tex, float s)   \n>>  一维纹理查询 \n\n>  tex1D(sampler1D tex, float s, float dsdx, float dsdy)   \n>>  使用导数值（derivatives）查询一维纹理 \n\n>  Tex1D(sampler1D tex, float2 sz) \n>>  一维纹理查询，并进行深度值比较 \n\n>  Tex1D(sampler1D tex, float2 sz, float dsdx,float dsdy) \n>>  使用导数值（derivatives）查询一维纹理， 并进行深度值比较 \n\n>  Tex1Dproj(sampler1D tex, float2 sq) \n>>  一维投影纹理查询 \n\n>  Tex1Dproj(sampler1D tex, float3 szq) \n>>  一维投影纹理查询，并比较深度值 \n\n>  Tex2D(sampler2D tex, float2 s)   \n>>  二维纹理查询 \n\n>  Tex2D(sampler2D tex, float2 s, float2 dsdx, float2 dsdy)   \n>>  使用导数值（derivatives）查询二维纹理 \n\n>  Tex2D(sampler2D tex, float3 sz) \n>>  二维纹理查询，并进行深度值比较 \n\n>  Tex2D(sampler2D tex, float3 sz, float2 dsdx,float2 dsdy) \n>>  使用导数值（derivatives）查询二维纹理，并进行深度值比较\n\n>  Tex2Dproj(sampler2D tex, float3 sq) \n>>  二维投影纹理查询\n\n>  Tex2Dproj(sampler2D tex, float4 szq) \n>>  二维投影纹理查询，并进行深度值比较 \n\n>  texRECT(samplerRECT tex, float2 s) \n>>  二维非投影矩形纹理查询（OpenGL独有）\n\n>  texRECT (samplerRECT tex, float2 s, float2 dsdx, float2 dsdy) \n>>  二维非投影使用导数的矩形纹理查询（OpenGL独有）\n  \n>  texRECT (samplerRECT tex, float3 sz) \n>>  二维非投影深度比较矩形纹理查询（OpenGL独有）\n\n>  texRECT (samplerRECT tex, float3 sz, float2 dsdx,float2 dsdy)  \n>>  二维非投影深度比较并使用导数的矩形纹理查询（OpenGL独有）\n\n>  texRECT proj(samplerRECT tex, float3 sq) \n>>  二维投影矩形纹理查询（OpenGL独有）\n\n>  texRECT proj(samplerRECT tex, float3 szq)\n>>  二维投影矩形纹理深度比较查询（OpenGL独有）\n\n>  Tex3d(sampler3D tex, float s)   \n>>  三维纹理查询\n\n>  Tex3D(sampler3D tex, float3 s, float3 dsdx, float3 dsdy)   \n>>  结合导数值（derivatives）查询三维纹理 \n\n>  Tex3Dproj(sampler3D tex, float4 szq) \n>>  查询三维投影纹理，并进行深度值比较 \n\n>  texCUBE(samplerCUBE tex, float3 s)   \n>>  查询立方体纹理 \n\n>  texCUBE (samplerCUBE tex, float3 s, float3 dsdx, float3 dsdy)   \n>>  结合导数值（derivatives）查询立方体纹理 \n\n>  texCUBEproj (samplerCUBE tex, float4 sq) \n>>  查询投影立方体纹理\n\n\n\n### *在这个表中，每个函数第二个参数的名字指明了在执行纹理查询的时候，它的值是如果被使用的:*\n\n>   *s表示这是一个一元、二元或三元纹理坐标。*\n\n>   *z表示这是一个用来进行阴影贴图查找的深度比较值。*\n\n>   *q表示这是一个透视值，在进行纹理查找之前，它被用来除以纹理坐标（s）。*\n\n>   当你使用的纹理函数允许你指定一个深度比较值的时候，与之相关联的纹理单元必须被设置成深度比较纹理。否则，深度比较实际上不会被执行。\n\n\n\n# 偏导数函数(Derivative Functions)\n\n>  ddx(a)\t\n>>  参数a对应一个像素位置,返回该像素再X轴上的偏导数\n\n>  ddy(a)\t\n>>  参数a对应一个像素位置,返回该像素在Y轴上的偏导数\n\n\n\n\n\n# 调试函数(Debugging Function)\n\n>  void debug(float4 x)\t\n>>  如果在编译时设置了DEBUG，片段着 色程序中调用该函数可以将值x作为COLOR语义的最终输出；否则该函数什么也不做。","source":"unity/Unity Shader CG Standard function library.md","raw":"---\nlayout: page\ntitle: unity Shader CG 标准函数库\ndate: 2017-11-28 19:46:23\ntags: Shader\ntype: unity\norder: 30\n---\n\n# Unity CG 函数\n\n\n\n# 数学函数（Mathematical Functions）\n\n>  abs(x)\t\n>>  返回输入参数的绝对值\n\n>  acos(x)\t\n>>  反余切函数，输入参数范围为[-1,1]， 返回[0,π]区间的角度值\n\n>  all(x)\t\n>>  如果输入参数均不为0，则返回ture； 否则返回flase。&&运算\n\n>  any(x)\t\n>>  输入参数只要有其中一个不为0，则返回true。\n\n>  asin(x)\t\n>>  反正弦函数,输入参数取值区间为[−1,1]，返回角度值范围为, [−π2,π2]\n\n>  atan(x)\t\n>>  反正切函数，返回角度值范围为[−π2,π2]\n\n>  atan2(y,x)\t\n>>  计算y/x的反正切值。实际上和atan(x)函数功能完全一样，至少输入参数不同。atan(x) = atan2(x, float(1))。\n\n>  ceil(x)\t\n>>  对输入参数向上取整。例如： ceil(float(1.3)) ，其返回值为2.0\n\n>  clamp(x,a,b)\t\n>>  如果x值小于a，则返回a；如果x值大于b，返回b；\t否则，返回x。\n\n>  cos(x)\t\n>>  返回弧度x的余弦值。返回值范围为[−1,1]\n\n>  cosh(x)\t\n>>  双曲余弦（hyperbolic cosine）函数，计算x的双曲余弦值。\n\n>  cross(A,B)\t\n>>  返回两个三元向量的叉积(cross product)。注意，输入参数必须是三元向量！\n\n>  degrees(x)\t\n>>  输入参数为弧度值(radians)，函数将其转换为角度值(degrees)\n\n>  determinant(m)\t\n>>  计算矩阵的行列式因子。\n\n>  dot(A,B)\t\n>>  返回A和B的点积(dot product)。参数A和B可以是标量，也可以是向量（输入参数方面，点积和叉积函数有很大不同）。\n\n>  exp(x)\t\n>>  计算ex的值，e=2.71828182845904523536\n\n>  exp2(x)\t\n>>  计算2x的值\n\n>  floor(x)\t\n>>  对输入参数向下取整。例如floor(float(1.3))返回的值为1.0；但是floor(float(-1.3))返回的值为-2.0。该函数与ceil(x)函数相对应。\n\n>  fmod(x,y)\t\n>>  返回x/y的余数。如果y为0，结果不可预料。\n\n>  frac(x)\t\n>>  返回标量或矢量的小数\n\n>  frexp(x, out i)\t\n>>  将浮点数x分解为尾数和指数，即x=m∗2i， 返回m，并将指数存入i中；如果x为0，则尾数和指数都返回0\n\n>  isfinite(x)\t\n>>  判断标量或者向量中的每个数据是否是有限数，如果是返回true；否则返回false;\n\n>  isinf(x)\t\n>>  判断标量或者向量中的每个数据是否是无限，如果是返回true；否则返回false;\n\n>  isnan(x)\t\n>>  判断标量或者向量中的每个数据是否是非数据(not-a-number NaN)，如果是返回true；否则返回false;\n\n>  ldexp(x, n)\t\n>>  计算x∗2n的值\n\n>  lerp(a, b, f)\t\n>>  计算(1−f)∗a+b∗f或者a+f∗(b−a)的值。即在下限a和上限b之间进行插值，f表示权值。注意，如果a和b是向量，则权值f必须是标量或者等长的向量。\n\n>  lit(NdotL, NdotH, m)\t\n>>  N表示法向量；\n>\n>>  L表示入射光向量；\n>\n>>  H表示半角向量；\n>\n>>  m表示高光系数。 \n>\n>>  函数计算环境光、散射光、镜面光的贡献，返回的4元向量。 \n>\n>>  X位表示环境光的贡献，总是1.0; \n>\n>>  Y位代表散射光的贡献，如果 N∙L<0，则为0；否则为N∙L \n>\n>>  Z位代表镜面光的贡献，如果N∙L<0 或者N∙H<0，则位0；否则为(N∙L)m;\n>\n>>  W位始终位1.0\n\n>  log(x)\t\n>>  计算ln(x)的值，x必须大于0\n\n>  log2(x)\t\n>>  计算log(x)2的值，x必须大于0\n\n>  log10(x)\t\n>>  计算log(x)10的值，x必须大于0\n\n>  max(a, b)\t\n>>  比较两个标量或等长向量元素，返回最大值。\n\n>  min(a,b)\t\n>>  比较两个标量或等长向量元素，返回最小值。\n\n>  modf(x, out ip)\t\n>>  把x分解成整数和分数两部分，每部分都和x有着相同的符号，整数部分被保存在ip中，分数部分由函数返回\n\n>  mul(M, N)\t\n>>  矩阵M和矩阵N的积，计算方法如下\n>>  ![mul(M,N)](https://www.github.com/AlianBlank/githubimgoss/raw/shader-imgs-oss/StoryWriter/mul(M,N).jpg)\n\n>  mul(M, v)\t\n>>  矩阵M和列向量v的积，公式如下\n>>  ![mul(M,v)](https://www.github.com/AlianBlank/githubimgoss/raw/shader-imgs-oss/StoryWriter/mul(M,v).jpg)\n\n>  mul(v, M)\t\n>>  行向量v和矩阵M的积，公式如下\n>>  ![mul(v,M)](https://www.github.com/AlianBlank/githubimgoss/raw/shader-imgs-oss/StoryWriter/mul(v,M).jpg)\n\n>  noise(x)\t\n>>  根据它的参数类型，这个函数可以是一元、二元或三元噪音函数。返回的值在0和1之间，并且通常与给定的输入值一样\n\n>  pow(x, y)\t\n>>  xy\n\n>  radians(x)\t\n>>  函数将角度值转换为弧度值\n\n>  round(x)\t\n>>  返回四舍五入值。\n\n>  rsqrt(x)\t\n>>  x的平方根的倒数，x必须大于0\n\n>  saturate(x)\t\n>>  把x限制到[0,1]之间\n\n>  sign(x)\t\n>>  如果x>0则返回1；否则返回0\n\n>  sin(x)\t\n>>  输入参数为弧度，计算正弦值，返回值范围 为[-1,1]\n\n>  sincos(float x, out s, out c)\t\n>>  该函数是同时计算x的sin值和cos值，其中s=sin(x)，c=cos(x)。该函数用于“同时需要计算sin值和cos值的情况”，比分别运算要快很多!\n\n>  sinh(x)\t\n>>  计算x的双曲正弦\n\n>  smoothstep(min, max, x)\t\n>>  值x位于min、max区间中。如果x=min，返回0；如果x=max，返回1；如果x在两者之间，\n>\n>>  按照下列公式返回数据：\n−2∗(x−minmax−min)3+3∗(x−minmax−min)2\n\n>  step(a, x)\t\n>>  如果x<a，返回0；否则，返回1\n\n>  sqrt(x)\t\n>>  求x的平方根，x√，x必须大于0\n\n>  tan(x)\t\n>>  计算x正切值\n\n>  tanh(x)\t\n>>  计算x的双曲线切线\n\n>  transpose(M)\t\n>>  矩阵M的转置矩阵\n如果M是一个AxB矩阵，M的转置是一个BxA矩阵，它的第一列是M的第一行，第二列是M的第二行，第三列是M的第三行，等等\n\n\n# 几何函数(Geometric Functions)\n\n>  distance(pt1, pt2)\t\n>>  两点之间的欧几里德距离（Euclidean distance）\n\n>  faceforward(N,I,Ng)\t\n>>  如果Ng∙I<0，返回N；否则返回-N。\n\n>  length(v)\t\n>>  返回一个向量的模，即sqrt(dot(v,v))\n\n>  normalize(v)\t\n>>  返回v向量的单位向量\n\n>  reflect(I, N)\t\n>>  根据入射光纤方向I和表面法向量N计算反射向量，仅对三元向量有效\n\n>  refract(I,N,eta)\t\n>>  根据入射光线方向I，表面法向量N和折射相对系数eta,计算折射向量。如果对给定的eta,I和N之间的角度太大，返回(0,0,0)。\n只对三元向量有效\n\n\n# 纹理映射函数(Texture Map Functions)\n\n>  tex1D(sampler1D tex, float s)   \n>>  一维纹理查询 \n\n>  tex1D(sampler1D tex, float s, float dsdx, float dsdy)   \n>>  使用导数值（derivatives）查询一维纹理 \n\n>  Tex1D(sampler1D tex, float2 sz) \n>>  一维纹理查询，并进行深度值比较 \n\n>  Tex1D(sampler1D tex, float2 sz, float dsdx,float dsdy) \n>>  使用导数值（derivatives）查询一维纹理， 并进行深度值比较 \n\n>  Tex1Dproj(sampler1D tex, float2 sq) \n>>  一维投影纹理查询 \n\n>  Tex1Dproj(sampler1D tex, float3 szq) \n>>  一维投影纹理查询，并比较深度值 \n\n>  Tex2D(sampler2D tex, float2 s)   \n>>  二维纹理查询 \n\n>  Tex2D(sampler2D tex, float2 s, float2 dsdx, float2 dsdy)   \n>>  使用导数值（derivatives）查询二维纹理 \n\n>  Tex2D(sampler2D tex, float3 sz) \n>>  二维纹理查询，并进行深度值比较 \n\n>  Tex2D(sampler2D tex, float3 sz, float2 dsdx,float2 dsdy) \n>>  使用导数值（derivatives）查询二维纹理，并进行深度值比较\n\n>  Tex2Dproj(sampler2D tex, float3 sq) \n>>  二维投影纹理查询\n\n>  Tex2Dproj(sampler2D tex, float4 szq) \n>>  二维投影纹理查询，并进行深度值比较 \n\n>  texRECT(samplerRECT tex, float2 s) \n>>  二维非投影矩形纹理查询（OpenGL独有）\n\n>  texRECT (samplerRECT tex, float2 s, float2 dsdx, float2 dsdy) \n>>  二维非投影使用导数的矩形纹理查询（OpenGL独有）\n  \n>  texRECT (samplerRECT tex, float3 sz) \n>>  二维非投影深度比较矩形纹理查询（OpenGL独有）\n\n>  texRECT (samplerRECT tex, float3 sz, float2 dsdx,float2 dsdy)  \n>>  二维非投影深度比较并使用导数的矩形纹理查询（OpenGL独有）\n\n>  texRECT proj(samplerRECT tex, float3 sq) \n>>  二维投影矩形纹理查询（OpenGL独有）\n\n>  texRECT proj(samplerRECT tex, float3 szq)\n>>  二维投影矩形纹理深度比较查询（OpenGL独有）\n\n>  Tex3d(sampler3D tex, float s)   \n>>  三维纹理查询\n\n>  Tex3D(sampler3D tex, float3 s, float3 dsdx, float3 dsdy)   \n>>  结合导数值（derivatives）查询三维纹理 \n\n>  Tex3Dproj(sampler3D tex, float4 szq) \n>>  查询三维投影纹理，并进行深度值比较 \n\n>  texCUBE(samplerCUBE tex, float3 s)   \n>>  查询立方体纹理 \n\n>  texCUBE (samplerCUBE tex, float3 s, float3 dsdx, float3 dsdy)   \n>>  结合导数值（derivatives）查询立方体纹理 \n\n>  texCUBEproj (samplerCUBE tex, float4 sq) \n>>  查询投影立方体纹理\n\n\n\n### *在这个表中，每个函数第二个参数的名字指明了在执行纹理查询的时候，它的值是如果被使用的:*\n\n>   *s表示这是一个一元、二元或三元纹理坐标。*\n\n>   *z表示这是一个用来进行阴影贴图查找的深度比较值。*\n\n>   *q表示这是一个透视值，在进行纹理查找之前，它被用来除以纹理坐标（s）。*\n\n>   当你使用的纹理函数允许你指定一个深度比较值的时候，与之相关联的纹理单元必须被设置成深度比较纹理。否则，深度比较实际上不会被执行。\n\n\n\n# 偏导数函数(Derivative Functions)\n\n>  ddx(a)\t\n>>  参数a对应一个像素位置,返回该像素再X轴上的偏导数\n\n>  ddy(a)\t\n>>  参数a对应一个像素位置,返回该像素在Y轴上的偏导数\n\n\n\n\n\n# 调试函数(Debugging Function)\n\n>  void debug(float4 x)\t\n>>  如果在编译时设置了DEBUG，片段着 色程序中调用该函数可以将值x作为COLOR语义的最终输出；否则该函数什么也不做。","updated":"2017-11-28T11:46:43.000Z","path":"unity/Unity Shader CG Standard function library.html","comments":1,"_id":"cjajk6r5w00072t6ui0bkdi6t","content":"<h1 id=\"Unity-CG-函数\"><a href=\"#Unity-CG-函数\" class=\"headerlink\" title=\"Unity CG 函数\"></a>Unity CG 函数</h1><h1 id=\"数学函数（Mathematical-Functions）\"><a href=\"#数学函数（Mathematical-Functions）\" class=\"headerlink\" title=\"数学函数（Mathematical Functions）\"></a>数学函数（Mathematical Functions）</h1><blockquote>\n<p> abs(x)    </p>\n<blockquote>\n<p> 返回输入参数的绝对值</p>\n</blockquote>\n<p> acos(x)    </p>\n<blockquote>\n<p> 反余切函数，输入参数范围为[-1,1]， 返回[0,π]区间的角度值</p>\n</blockquote>\n<p> all(x)    </p>\n<blockquote>\n<p> 如果输入参数均不为0，则返回ture； 否则返回flase。&amp;&amp;运算</p>\n</blockquote>\n<p> any(x)    </p>\n<blockquote>\n<p> 输入参数只要有其中一个不为0，则返回true。</p>\n</blockquote>\n<p> asin(x)    </p>\n<blockquote>\n<p> 反正弦函数,输入参数取值区间为[−1,1]，返回角度值范围为, [−π2,π2]</p>\n</blockquote>\n<p> atan(x)    </p>\n<blockquote>\n<p> 反正切函数，返回角度值范围为[−π2,π2]</p>\n</blockquote>\n<p> atan2(y,x)    </p>\n<blockquote>\n<p> 计算y/x的反正切值。实际上和atan(x)函数功能完全一样，至少输入参数不同。atan(x) = atan2(x, float(1))。</p>\n</blockquote>\n<p> ceil(x)    </p>\n<blockquote>\n<p> 对输入参数向上取整。例如： ceil(float(1.3)) ，其返回值为2.0</p>\n</blockquote>\n<p> clamp(x,a,b)    </p>\n<blockquote>\n<p> 如果x值小于a，则返回a；如果x值大于b，返回b；    否则，返回x。</p>\n</blockquote>\n<p> cos(x)    </p>\n<blockquote>\n<p> 返回弧度x的余弦值。返回值范围为[−1,1]</p>\n</blockquote>\n<p> cosh(x)    </p>\n<blockquote>\n<p> 双曲余弦（hyperbolic cosine）函数，计算x的双曲余弦值。</p>\n</blockquote>\n<p> cross(A,B)    </p>\n<blockquote>\n<p> 返回两个三元向量的叉积(cross product)。注意，输入参数必须是三元向量！</p>\n</blockquote>\n<p> degrees(x)    </p>\n<blockquote>\n<p> 输入参数为弧度值(radians)，函数将其转换为角度值(degrees)</p>\n</blockquote>\n<p> determinant(m)    </p>\n<blockquote>\n<p> 计算矩阵的行列式因子。</p>\n</blockquote>\n<p> dot(A,B)    </p>\n<blockquote>\n<p> 返回A和B的点积(dot product)。参数A和B可以是标量，也可以是向量（输入参数方面，点积和叉积函数有很大不同）。</p>\n</blockquote>\n<p> exp(x)    </p>\n<blockquote>\n<p> 计算ex的值，e=2.71828182845904523536</p>\n</blockquote>\n<p> exp2(x)    </p>\n<blockquote>\n<p> 计算2x的值</p>\n</blockquote>\n<p> floor(x)    </p>\n<blockquote>\n<p> 对输入参数向下取整。例如floor(float(1.3))返回的值为1.0；但是floor(float(-1.3))返回的值为-2.0。该函数与ceil(x)函数相对应。</p>\n</blockquote>\n<p> fmod(x,y)    </p>\n<blockquote>\n<p> 返回x/y的余数。如果y为0，结果不可预料。</p>\n</blockquote>\n<p> frac(x)    </p>\n<blockquote>\n<p> 返回标量或矢量的小数</p>\n</blockquote>\n<p> frexp(x, out i)    </p>\n<blockquote>\n<p> 将浮点数x分解为尾数和指数，即x=m∗2i， 返回m，并将指数存入i中；如果x为0，则尾数和指数都返回0</p>\n</blockquote>\n<p> isfinite(x)    </p>\n<blockquote>\n<p> 判断标量或者向量中的每个数据是否是有限数，如果是返回true；否则返回false;</p>\n</blockquote>\n<p> isinf(x)    </p>\n<blockquote>\n<p> 判断标量或者向量中的每个数据是否是无限，如果是返回true；否则返回false;</p>\n</blockquote>\n<p> isnan(x)    </p>\n<blockquote>\n<p> 判断标量或者向量中的每个数据是否是非数据(not-a-number NaN)，如果是返回true；否则返回false;</p>\n</blockquote>\n<p> ldexp(x, n)    </p>\n<blockquote>\n<p> 计算x∗2n的值</p>\n</blockquote>\n<p> lerp(a, b, f)    </p>\n<blockquote>\n<p> 计算(1−f)∗a+b∗f或者a+f∗(b−a)的值。即在下限a和上限b之间进行插值，f表示权值。注意，如果a和b是向量，则权值f必须是标量或者等长的向量。</p>\n</blockquote>\n<p> lit(NdotL, NdotH, m)    </p>\n<blockquote>\n<p> N表示法向量；</p>\n<p> L表示入射光向量；</p>\n<p> H表示半角向量；</p>\n<p> m表示高光系数。 </p>\n<p> 函数计算环境光、散射光、镜面光的贡献，返回的4元向量。 </p>\n<p> X位表示环境光的贡献，总是1.0; </p>\n<p> Y位代表散射光的贡献，如果 N∙L&lt;0，则为0；否则为N∙L </p>\n<p> Z位代表镜面光的贡献，如果N∙L&lt;0 或者N∙H&lt;0，则位0；否则为(N∙L)m;</p>\n<p> W位始终位1.0</p>\n</blockquote>\n<p> log(x)    </p>\n<blockquote>\n<p> 计算ln(x)的值，x必须大于0</p>\n</blockquote>\n<p> log2(x)    </p>\n<blockquote>\n<p> 计算log(x)2的值，x必须大于0</p>\n</blockquote>\n<p> log10(x)    </p>\n<blockquote>\n<p> 计算log(x)10的值，x必须大于0</p>\n</blockquote>\n<p> max(a, b)    </p>\n<blockquote>\n<p> 比较两个标量或等长向量元素，返回最大值。</p>\n</blockquote>\n<p> min(a,b)    </p>\n<blockquote>\n<p> 比较两个标量或等长向量元素，返回最小值。</p>\n</blockquote>\n<p> modf(x, out ip)    </p>\n<blockquote>\n<p> 把x分解成整数和分数两部分，每部分都和x有着相同的符号，整数部分被保存在ip中，分数部分由函数返回</p>\n</blockquote>\n<p> mul(M, N)    </p>\n<blockquote>\n<p> 矩阵M和矩阵N的积，计算方法如下<br> <img src=\"https://www.github.com/AlianBlank/githubimgoss/raw/shader-imgs-oss/StoryWriter/mul(M,N\" alt=\"mul(M,N)\">.jpg)</p>\n</blockquote>\n<p> mul(M, v)    </p>\n<blockquote>\n<p> 矩阵M和列向量v的积，公式如下<br> <img src=\"https://www.github.com/AlianBlank/githubimgoss/raw/shader-imgs-oss/StoryWriter/mul(M,v\" alt=\"mul(M,v)\">.jpg)</p>\n</blockquote>\n<p> mul(v, M)    </p>\n<blockquote>\n<p> 行向量v和矩阵M的积，公式如下<br> <img src=\"https://www.github.com/AlianBlank/githubimgoss/raw/shader-imgs-oss/StoryWriter/mul(v,M\" alt=\"mul(v,M)\">.jpg)</p>\n</blockquote>\n<p> noise(x)    </p>\n<blockquote>\n<p> 根据它的参数类型，这个函数可以是一元、二元或三元噪音函数。返回的值在0和1之间，并且通常与给定的输入值一样</p>\n</blockquote>\n<p> pow(x, y)    </p>\n<blockquote>\n<p> xy</p>\n</blockquote>\n<p> radians(x)    </p>\n<blockquote>\n<p> 函数将角度值转换为弧度值</p>\n</blockquote>\n<p> round(x)    </p>\n<blockquote>\n<p> 返回四舍五入值。</p>\n</blockquote>\n<p> rsqrt(x)    </p>\n<blockquote>\n<p> x的平方根的倒数，x必须大于0</p>\n</blockquote>\n<p> saturate(x)    </p>\n<blockquote>\n<p> 把x限制到[0,1]之间</p>\n</blockquote>\n<p> sign(x)    </p>\n<blockquote>\n<p> 如果x&gt;0则返回1；否则返回0</p>\n</blockquote>\n<p> sin(x)    </p>\n<blockquote>\n<p> 输入参数为弧度，计算正弦值，返回值范围 为[-1,1]</p>\n</blockquote>\n<p> sincos(float x, out s, out c)    </p>\n<blockquote>\n<p> 该函数是同时计算x的sin值和cos值，其中s=sin(x)，c=cos(x)。该函数用于“同时需要计算sin值和cos值的情况”，比分别运算要快很多!</p>\n</blockquote>\n<p> sinh(x)    </p>\n<blockquote>\n<p> 计算x的双曲正弦</p>\n</blockquote>\n<p> smoothstep(min, max, x)    </p>\n<blockquote>\n<p> 值x位于min、max区间中。如果x=min，返回0；如果x=max，返回1；如果x在两者之间，</p>\n<p> 按照下列公式返回数据：<br>−2∗(x−minmax−min)3+3∗(x−minmax−min)2</p>\n</blockquote>\n<p> step(a, x)    </p>\n<blockquote>\n<p> 如果x&lt;a，返回0；否则，返回1</p>\n</blockquote>\n<p> sqrt(x)    </p>\n<blockquote>\n<p> 求x的平方根，x√，x必须大于0</p>\n</blockquote>\n<p> tan(x)    </p>\n<blockquote>\n<p> 计算x正切值</p>\n</blockquote>\n<p> tanh(x)    </p>\n<blockquote>\n<p> 计算x的双曲线切线</p>\n</blockquote>\n<p> transpose(M)    </p>\n<blockquote>\n<p> 矩阵M的转置矩阵<br>如果M是一个AxB矩阵，M的转置是一个BxA矩阵，它的第一列是M的第一行，第二列是M的第二行，第三列是M的第三行，等等</p>\n</blockquote>\n</blockquote>\n<h1 id=\"几何函数-Geometric-Functions\"><a href=\"#几何函数-Geometric-Functions\" class=\"headerlink\" title=\"几何函数(Geometric Functions)\"></a>几何函数(Geometric Functions)</h1><blockquote>\n<p> distance(pt1, pt2)    </p>\n<blockquote>\n<p> 两点之间的欧几里德距离（Euclidean distance）</p>\n</blockquote>\n<p> faceforward(N,I,Ng)    </p>\n<blockquote>\n<p> 如果Ng∙I&lt;0，返回N；否则返回-N。</p>\n</blockquote>\n<p> length(v)    </p>\n<blockquote>\n<p> 返回一个向量的模，即sqrt(dot(v,v))</p>\n</blockquote>\n<p> normalize(v)    </p>\n<blockquote>\n<p> 返回v向量的单位向量</p>\n</blockquote>\n<p> reflect(I, N)    </p>\n<blockquote>\n<p> 根据入射光纤方向I和表面法向量N计算反射向量，仅对三元向量有效</p>\n</blockquote>\n<p> refract(I,N,eta)    </p>\n<blockquote>\n<p> 根据入射光线方向I，表面法向量N和折射相对系数eta,计算折射向量。如果对给定的eta,I和N之间的角度太大，返回(0,0,0)。<br>只对三元向量有效</p>\n</blockquote>\n</blockquote>\n<h1 id=\"纹理映射函数-Texture-Map-Functions\"><a href=\"#纹理映射函数-Texture-Map-Functions\" class=\"headerlink\" title=\"纹理映射函数(Texture Map Functions)\"></a>纹理映射函数(Texture Map Functions)</h1><blockquote>\n<p> tex1D(sampler1D tex, float s)   </p>\n<blockquote>\n<p> 一维纹理查询 </p>\n</blockquote>\n<p> tex1D(sampler1D tex, float s, float dsdx, float dsdy)   </p>\n<blockquote>\n<p> 使用导数值（derivatives）查询一维纹理 </p>\n</blockquote>\n<p> Tex1D(sampler1D tex, float2 sz) </p>\n<blockquote>\n<p> 一维纹理查询，并进行深度值比较 </p>\n</blockquote>\n<p> Tex1D(sampler1D tex, float2 sz, float dsdx,float dsdy) </p>\n<blockquote>\n<p> 使用导数值（derivatives）查询一维纹理， 并进行深度值比较 </p>\n</blockquote>\n<p> Tex1Dproj(sampler1D tex, float2 sq) </p>\n<blockquote>\n<p> 一维投影纹理查询 </p>\n</blockquote>\n<p> Tex1Dproj(sampler1D tex, float3 szq) </p>\n<blockquote>\n<p> 一维投影纹理查询，并比较深度值 </p>\n</blockquote>\n<p> Tex2D(sampler2D tex, float2 s)   </p>\n<blockquote>\n<p> 二维纹理查询 </p>\n</blockquote>\n<p> Tex2D(sampler2D tex, float2 s, float2 dsdx, float2 dsdy)   </p>\n<blockquote>\n<p> 使用导数值（derivatives）查询二维纹理 </p>\n</blockquote>\n<p> Tex2D(sampler2D tex, float3 sz) </p>\n<blockquote>\n<p> 二维纹理查询，并进行深度值比较 </p>\n</blockquote>\n<p> Tex2D(sampler2D tex, float3 sz, float2 dsdx,float2 dsdy) </p>\n<blockquote>\n<p> 使用导数值（derivatives）查询二维纹理，并进行深度值比较</p>\n</blockquote>\n<p> Tex2Dproj(sampler2D tex, float3 sq) </p>\n<blockquote>\n<p> 二维投影纹理查询</p>\n</blockquote>\n<p> Tex2Dproj(sampler2D tex, float4 szq) </p>\n<blockquote>\n<p> 二维投影纹理查询，并进行深度值比较 </p>\n</blockquote>\n<p> texRECT(samplerRECT tex, float2 s) </p>\n<blockquote>\n<p> 二维非投影矩形纹理查询（OpenGL独有）</p>\n</blockquote>\n<p> texRECT (samplerRECT tex, float2 s, float2 dsdx, float2 dsdy) </p>\n<blockquote>\n<p> 二维非投影使用导数的矩形纹理查询（OpenGL独有）</p>\n</blockquote>\n<p> texRECT (samplerRECT tex, float3 sz) </p>\n<blockquote>\n<p> 二维非投影深度比较矩形纹理查询（OpenGL独有）</p>\n</blockquote>\n<p> texRECT (samplerRECT tex, float3 sz, float2 dsdx,float2 dsdy)  </p>\n<blockquote>\n<p> 二维非投影深度比较并使用导数的矩形纹理查询（OpenGL独有）</p>\n</blockquote>\n<p> texRECT proj(samplerRECT tex, float3 sq) </p>\n<blockquote>\n<p> 二维投影矩形纹理查询（OpenGL独有）</p>\n</blockquote>\n<p> texRECT proj(samplerRECT tex, float3 szq)</p>\n<blockquote>\n<p> 二维投影矩形纹理深度比较查询（OpenGL独有）</p>\n</blockquote>\n<p> Tex3d(sampler3D tex, float s)   </p>\n<blockquote>\n<p> 三维纹理查询</p>\n</blockquote>\n<p> Tex3D(sampler3D tex, float3 s, float3 dsdx, float3 dsdy)   </p>\n<blockquote>\n<p> 结合导数值（derivatives）查询三维纹理 </p>\n</blockquote>\n<p> Tex3Dproj(sampler3D tex, float4 szq) </p>\n<blockquote>\n<p> 查询三维投影纹理，并进行深度值比较 </p>\n</blockquote>\n<p> texCUBE(samplerCUBE tex, float3 s)   </p>\n<blockquote>\n<p> 查询立方体纹理 </p>\n</blockquote>\n<p> texCUBE (samplerCUBE tex, float3 s, float3 dsdx, float3 dsdy)   </p>\n<blockquote>\n<p> 结合导数值（derivatives）查询立方体纹理 </p>\n</blockquote>\n<p> texCUBEproj (samplerCUBE tex, float4 sq) </p>\n<blockquote>\n<p> 查询投影立方体纹理</p>\n</blockquote>\n</blockquote>\n<h3 id=\"在这个表中，每个函数第二个参数的名字指明了在执行纹理查询的时候，它的值是如果被使用的\"><a href=\"#在这个表中，每个函数第二个参数的名字指明了在执行纹理查询的时候，它的值是如果被使用的\" class=\"headerlink\" title=\"在这个表中，每个函数第二个参数的名字指明了在执行纹理查询的时候，它的值是如果被使用的:\"></a><em>在这个表中，每个函数第二个参数的名字指明了在执行纹理查询的时候，它的值是如果被使用的:</em></h3><blockquote>\n<p>  <em>s表示这是一个一元、二元或三元纹理坐标。</em></p>\n<p>  <em>z表示这是一个用来进行阴影贴图查找的深度比较值。</em></p>\n<p>  <em>q表示这是一个透视值，在进行纹理查找之前，它被用来除以纹理坐标（s）。</em></p>\n<p>  当你使用的纹理函数允许你指定一个深度比较值的时候，与之相关联的纹理单元必须被设置成深度比较纹理。否则，深度比较实际上不会被执行。</p>\n</blockquote>\n<h1 id=\"偏导数函数-Derivative-Functions\"><a href=\"#偏导数函数-Derivative-Functions\" class=\"headerlink\" title=\"偏导数函数(Derivative Functions)\"></a>偏导数函数(Derivative Functions)</h1><blockquote>\n<p> ddx(a)    </p>\n<blockquote>\n<p> 参数a对应一个像素位置,返回该像素再X轴上的偏导数</p>\n</blockquote>\n<p> ddy(a)    </p>\n<blockquote>\n<p> 参数a对应一个像素位置,返回该像素在Y轴上的偏导数</p>\n</blockquote>\n</blockquote>\n<h1 id=\"调试函数-Debugging-Function\"><a href=\"#调试函数-Debugging-Function\" class=\"headerlink\" title=\"调试函数(Debugging Function)\"></a>调试函数(Debugging Function)</h1><blockquote>\n<p> void debug(float4 x)    </p>\n<blockquote>\n<p> 如果在编译时设置了DEBUG，片段着 色程序中调用该函数可以将值x作为COLOR语义的最终输出；否则该函数什么也不做。</p>\n</blockquote>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Unity-CG-函数\"><a href=\"#Unity-CG-函数\" class=\"headerlink\" title=\"Unity CG 函数\"></a>Unity CG 函数</h1><h1 id=\"数学函数（Mathematical-Functions）\"><a href=\"#数学函数（Mathematical-Functions）\" class=\"headerlink\" title=\"数学函数（Mathematical Functions）\"></a>数学函数（Mathematical Functions）</h1><blockquote>\n<p> abs(x)    </p>\n<blockquote>\n<p> 返回输入参数的绝对值</p>\n</blockquote>\n<p> acos(x)    </p>\n<blockquote>\n<p> 反余切函数，输入参数范围为[-1,1]， 返回[0,π]区间的角度值</p>\n</blockquote>\n<p> all(x)    </p>\n<blockquote>\n<p> 如果输入参数均不为0，则返回ture； 否则返回flase。&amp;&amp;运算</p>\n</blockquote>\n<p> any(x)    </p>\n<blockquote>\n<p> 输入参数只要有其中一个不为0，则返回true。</p>\n</blockquote>\n<p> asin(x)    </p>\n<blockquote>\n<p> 反正弦函数,输入参数取值区间为[−1,1]，返回角度值范围为, [−π2,π2]</p>\n</blockquote>\n<p> atan(x)    </p>\n<blockquote>\n<p> 反正切函数，返回角度值范围为[−π2,π2]</p>\n</blockquote>\n<p> atan2(y,x)    </p>\n<blockquote>\n<p> 计算y/x的反正切值。实际上和atan(x)函数功能完全一样，至少输入参数不同。atan(x) = atan2(x, float(1))。</p>\n</blockquote>\n<p> ceil(x)    </p>\n<blockquote>\n<p> 对输入参数向上取整。例如： ceil(float(1.3)) ，其返回值为2.0</p>\n</blockquote>\n<p> clamp(x,a,b)    </p>\n<blockquote>\n<p> 如果x值小于a，则返回a；如果x值大于b，返回b；    否则，返回x。</p>\n</blockquote>\n<p> cos(x)    </p>\n<blockquote>\n<p> 返回弧度x的余弦值。返回值范围为[−1,1]</p>\n</blockquote>\n<p> cosh(x)    </p>\n<blockquote>\n<p> 双曲余弦（hyperbolic cosine）函数，计算x的双曲余弦值。</p>\n</blockquote>\n<p> cross(A,B)    </p>\n<blockquote>\n<p> 返回两个三元向量的叉积(cross product)。注意，输入参数必须是三元向量！</p>\n</blockquote>\n<p> degrees(x)    </p>\n<blockquote>\n<p> 输入参数为弧度值(radians)，函数将其转换为角度值(degrees)</p>\n</blockquote>\n<p> determinant(m)    </p>\n<blockquote>\n<p> 计算矩阵的行列式因子。</p>\n</blockquote>\n<p> dot(A,B)    </p>\n<blockquote>\n<p> 返回A和B的点积(dot product)。参数A和B可以是标量，也可以是向量（输入参数方面，点积和叉积函数有很大不同）。</p>\n</blockquote>\n<p> exp(x)    </p>\n<blockquote>\n<p> 计算ex的值，e=2.71828182845904523536</p>\n</blockquote>\n<p> exp2(x)    </p>\n<blockquote>\n<p> 计算2x的值</p>\n</blockquote>\n<p> floor(x)    </p>\n<blockquote>\n<p> 对输入参数向下取整。例如floor(float(1.3))返回的值为1.0；但是floor(float(-1.3))返回的值为-2.0。该函数与ceil(x)函数相对应。</p>\n</blockquote>\n<p> fmod(x,y)    </p>\n<blockquote>\n<p> 返回x/y的余数。如果y为0，结果不可预料。</p>\n</blockquote>\n<p> frac(x)    </p>\n<blockquote>\n<p> 返回标量或矢量的小数</p>\n</blockquote>\n<p> frexp(x, out i)    </p>\n<blockquote>\n<p> 将浮点数x分解为尾数和指数，即x=m∗2i， 返回m，并将指数存入i中；如果x为0，则尾数和指数都返回0</p>\n</blockquote>\n<p> isfinite(x)    </p>\n<blockquote>\n<p> 判断标量或者向量中的每个数据是否是有限数，如果是返回true；否则返回false;</p>\n</blockquote>\n<p> isinf(x)    </p>\n<blockquote>\n<p> 判断标量或者向量中的每个数据是否是无限，如果是返回true；否则返回false;</p>\n</blockquote>\n<p> isnan(x)    </p>\n<blockquote>\n<p> 判断标量或者向量中的每个数据是否是非数据(not-a-number NaN)，如果是返回true；否则返回false;</p>\n</blockquote>\n<p> ldexp(x, n)    </p>\n<blockquote>\n<p> 计算x∗2n的值</p>\n</blockquote>\n<p> lerp(a, b, f)    </p>\n<blockquote>\n<p> 计算(1−f)∗a+b∗f或者a+f∗(b−a)的值。即在下限a和上限b之间进行插值，f表示权值。注意，如果a和b是向量，则权值f必须是标量或者等长的向量。</p>\n</blockquote>\n<p> lit(NdotL, NdotH, m)    </p>\n<blockquote>\n<p> N表示法向量；</p>\n<p> L表示入射光向量；</p>\n<p> H表示半角向量；</p>\n<p> m表示高光系数。 </p>\n<p> 函数计算环境光、散射光、镜面光的贡献，返回的4元向量。 </p>\n<p> X位表示环境光的贡献，总是1.0; </p>\n<p> Y位代表散射光的贡献，如果 N∙L&lt;0，则为0；否则为N∙L </p>\n<p> Z位代表镜面光的贡献，如果N∙L&lt;0 或者N∙H&lt;0，则位0；否则为(N∙L)m;</p>\n<p> W位始终位1.0</p>\n</blockquote>\n<p> log(x)    </p>\n<blockquote>\n<p> 计算ln(x)的值，x必须大于0</p>\n</blockquote>\n<p> log2(x)    </p>\n<blockquote>\n<p> 计算log(x)2的值，x必须大于0</p>\n</blockquote>\n<p> log10(x)    </p>\n<blockquote>\n<p> 计算log(x)10的值，x必须大于0</p>\n</blockquote>\n<p> max(a, b)    </p>\n<blockquote>\n<p> 比较两个标量或等长向量元素，返回最大值。</p>\n</blockquote>\n<p> min(a,b)    </p>\n<blockquote>\n<p> 比较两个标量或等长向量元素，返回最小值。</p>\n</blockquote>\n<p> modf(x, out ip)    </p>\n<blockquote>\n<p> 把x分解成整数和分数两部分，每部分都和x有着相同的符号，整数部分被保存在ip中，分数部分由函数返回</p>\n</blockquote>\n<p> mul(M, N)    </p>\n<blockquote>\n<p> 矩阵M和矩阵N的积，计算方法如下<br> <img src=\"https://www.github.com/AlianBlank/githubimgoss/raw/shader-imgs-oss/StoryWriter/mul(M,N\" alt=\"mul(M,N)\">.jpg)</p>\n</blockquote>\n<p> mul(M, v)    </p>\n<blockquote>\n<p> 矩阵M和列向量v的积，公式如下<br> <img src=\"https://www.github.com/AlianBlank/githubimgoss/raw/shader-imgs-oss/StoryWriter/mul(M,v\" alt=\"mul(M,v)\">.jpg)</p>\n</blockquote>\n<p> mul(v, M)    </p>\n<blockquote>\n<p> 行向量v和矩阵M的积，公式如下<br> <img src=\"https://www.github.com/AlianBlank/githubimgoss/raw/shader-imgs-oss/StoryWriter/mul(v,M\" alt=\"mul(v,M)\">.jpg)</p>\n</blockquote>\n<p> noise(x)    </p>\n<blockquote>\n<p> 根据它的参数类型，这个函数可以是一元、二元或三元噪音函数。返回的值在0和1之间，并且通常与给定的输入值一样</p>\n</blockquote>\n<p> pow(x, y)    </p>\n<blockquote>\n<p> xy</p>\n</blockquote>\n<p> radians(x)    </p>\n<blockquote>\n<p> 函数将角度值转换为弧度值</p>\n</blockquote>\n<p> round(x)    </p>\n<blockquote>\n<p> 返回四舍五入值。</p>\n</blockquote>\n<p> rsqrt(x)    </p>\n<blockquote>\n<p> x的平方根的倒数，x必须大于0</p>\n</blockquote>\n<p> saturate(x)    </p>\n<blockquote>\n<p> 把x限制到[0,1]之间</p>\n</blockquote>\n<p> sign(x)    </p>\n<blockquote>\n<p> 如果x&gt;0则返回1；否则返回0</p>\n</blockquote>\n<p> sin(x)    </p>\n<blockquote>\n<p> 输入参数为弧度，计算正弦值，返回值范围 为[-1,1]</p>\n</blockquote>\n<p> sincos(float x, out s, out c)    </p>\n<blockquote>\n<p> 该函数是同时计算x的sin值和cos值，其中s=sin(x)，c=cos(x)。该函数用于“同时需要计算sin值和cos值的情况”，比分别运算要快很多!</p>\n</blockquote>\n<p> sinh(x)    </p>\n<blockquote>\n<p> 计算x的双曲正弦</p>\n</blockquote>\n<p> smoothstep(min, max, x)    </p>\n<blockquote>\n<p> 值x位于min、max区间中。如果x=min，返回0；如果x=max，返回1；如果x在两者之间，</p>\n<p> 按照下列公式返回数据：<br>−2∗(x−minmax−min)3+3∗(x−minmax−min)2</p>\n</blockquote>\n<p> step(a, x)    </p>\n<blockquote>\n<p> 如果x&lt;a，返回0；否则，返回1</p>\n</blockquote>\n<p> sqrt(x)    </p>\n<blockquote>\n<p> 求x的平方根，x√，x必须大于0</p>\n</blockquote>\n<p> tan(x)    </p>\n<blockquote>\n<p> 计算x正切值</p>\n</blockquote>\n<p> tanh(x)    </p>\n<blockquote>\n<p> 计算x的双曲线切线</p>\n</blockquote>\n<p> transpose(M)    </p>\n<blockquote>\n<p> 矩阵M的转置矩阵<br>如果M是一个AxB矩阵，M的转置是一个BxA矩阵，它的第一列是M的第一行，第二列是M的第二行，第三列是M的第三行，等等</p>\n</blockquote>\n</blockquote>\n<h1 id=\"几何函数-Geometric-Functions\"><a href=\"#几何函数-Geometric-Functions\" class=\"headerlink\" title=\"几何函数(Geometric Functions)\"></a>几何函数(Geometric Functions)</h1><blockquote>\n<p> distance(pt1, pt2)    </p>\n<blockquote>\n<p> 两点之间的欧几里德距离（Euclidean distance）</p>\n</blockquote>\n<p> faceforward(N,I,Ng)    </p>\n<blockquote>\n<p> 如果Ng∙I&lt;0，返回N；否则返回-N。</p>\n</blockquote>\n<p> length(v)    </p>\n<blockquote>\n<p> 返回一个向量的模，即sqrt(dot(v,v))</p>\n</blockquote>\n<p> normalize(v)    </p>\n<blockquote>\n<p> 返回v向量的单位向量</p>\n</blockquote>\n<p> reflect(I, N)    </p>\n<blockquote>\n<p> 根据入射光纤方向I和表面法向量N计算反射向量，仅对三元向量有效</p>\n</blockquote>\n<p> refract(I,N,eta)    </p>\n<blockquote>\n<p> 根据入射光线方向I，表面法向量N和折射相对系数eta,计算折射向量。如果对给定的eta,I和N之间的角度太大，返回(0,0,0)。<br>只对三元向量有效</p>\n</blockquote>\n</blockquote>\n<h1 id=\"纹理映射函数-Texture-Map-Functions\"><a href=\"#纹理映射函数-Texture-Map-Functions\" class=\"headerlink\" title=\"纹理映射函数(Texture Map Functions)\"></a>纹理映射函数(Texture Map Functions)</h1><blockquote>\n<p> tex1D(sampler1D tex, float s)   </p>\n<blockquote>\n<p> 一维纹理查询 </p>\n</blockquote>\n<p> tex1D(sampler1D tex, float s, float dsdx, float dsdy)   </p>\n<blockquote>\n<p> 使用导数值（derivatives）查询一维纹理 </p>\n</blockquote>\n<p> Tex1D(sampler1D tex, float2 sz) </p>\n<blockquote>\n<p> 一维纹理查询，并进行深度值比较 </p>\n</blockquote>\n<p> Tex1D(sampler1D tex, float2 sz, float dsdx,float dsdy) </p>\n<blockquote>\n<p> 使用导数值（derivatives）查询一维纹理， 并进行深度值比较 </p>\n</blockquote>\n<p> Tex1Dproj(sampler1D tex, float2 sq) </p>\n<blockquote>\n<p> 一维投影纹理查询 </p>\n</blockquote>\n<p> Tex1Dproj(sampler1D tex, float3 szq) </p>\n<blockquote>\n<p> 一维投影纹理查询，并比较深度值 </p>\n</blockquote>\n<p> Tex2D(sampler2D tex, float2 s)   </p>\n<blockquote>\n<p> 二维纹理查询 </p>\n</blockquote>\n<p> Tex2D(sampler2D tex, float2 s, float2 dsdx, float2 dsdy)   </p>\n<blockquote>\n<p> 使用导数值（derivatives）查询二维纹理 </p>\n</blockquote>\n<p> Tex2D(sampler2D tex, float3 sz) </p>\n<blockquote>\n<p> 二维纹理查询，并进行深度值比较 </p>\n</blockquote>\n<p> Tex2D(sampler2D tex, float3 sz, float2 dsdx,float2 dsdy) </p>\n<blockquote>\n<p> 使用导数值（derivatives）查询二维纹理，并进行深度值比较</p>\n</blockquote>\n<p> Tex2Dproj(sampler2D tex, float3 sq) </p>\n<blockquote>\n<p> 二维投影纹理查询</p>\n</blockquote>\n<p> Tex2Dproj(sampler2D tex, float4 szq) </p>\n<blockquote>\n<p> 二维投影纹理查询，并进行深度值比较 </p>\n</blockquote>\n<p> texRECT(samplerRECT tex, float2 s) </p>\n<blockquote>\n<p> 二维非投影矩形纹理查询（OpenGL独有）</p>\n</blockquote>\n<p> texRECT (samplerRECT tex, float2 s, float2 dsdx, float2 dsdy) </p>\n<blockquote>\n<p> 二维非投影使用导数的矩形纹理查询（OpenGL独有）</p>\n</blockquote>\n<p> texRECT (samplerRECT tex, float3 sz) </p>\n<blockquote>\n<p> 二维非投影深度比较矩形纹理查询（OpenGL独有）</p>\n</blockquote>\n<p> texRECT (samplerRECT tex, float3 sz, float2 dsdx,float2 dsdy)  </p>\n<blockquote>\n<p> 二维非投影深度比较并使用导数的矩形纹理查询（OpenGL独有）</p>\n</blockquote>\n<p> texRECT proj(samplerRECT tex, float3 sq) </p>\n<blockquote>\n<p> 二维投影矩形纹理查询（OpenGL独有）</p>\n</blockquote>\n<p> texRECT proj(samplerRECT tex, float3 szq)</p>\n<blockquote>\n<p> 二维投影矩形纹理深度比较查询（OpenGL独有）</p>\n</blockquote>\n<p> Tex3d(sampler3D tex, float s)   </p>\n<blockquote>\n<p> 三维纹理查询</p>\n</blockquote>\n<p> Tex3D(sampler3D tex, float3 s, float3 dsdx, float3 dsdy)   </p>\n<blockquote>\n<p> 结合导数值（derivatives）查询三维纹理 </p>\n</blockquote>\n<p> Tex3Dproj(sampler3D tex, float4 szq) </p>\n<blockquote>\n<p> 查询三维投影纹理，并进行深度值比较 </p>\n</blockquote>\n<p> texCUBE(samplerCUBE tex, float3 s)   </p>\n<blockquote>\n<p> 查询立方体纹理 </p>\n</blockquote>\n<p> texCUBE (samplerCUBE tex, float3 s, float3 dsdx, float3 dsdy)   </p>\n<blockquote>\n<p> 结合导数值（derivatives）查询立方体纹理 </p>\n</blockquote>\n<p> texCUBEproj (samplerCUBE tex, float4 sq) </p>\n<blockquote>\n<p> 查询投影立方体纹理</p>\n</blockquote>\n</blockquote>\n<h3 id=\"在这个表中，每个函数第二个参数的名字指明了在执行纹理查询的时候，它的值是如果被使用的\"><a href=\"#在这个表中，每个函数第二个参数的名字指明了在执行纹理查询的时候，它的值是如果被使用的\" class=\"headerlink\" title=\"在这个表中，每个函数第二个参数的名字指明了在执行纹理查询的时候，它的值是如果被使用的:\"></a><em>在这个表中，每个函数第二个参数的名字指明了在执行纹理查询的时候，它的值是如果被使用的:</em></h3><blockquote>\n<p>  <em>s表示这是一个一元、二元或三元纹理坐标。</em></p>\n<p>  <em>z表示这是一个用来进行阴影贴图查找的深度比较值。</em></p>\n<p>  <em>q表示这是一个透视值，在进行纹理查找之前，它被用来除以纹理坐标（s）。</em></p>\n<p>  当你使用的纹理函数允许你指定一个深度比较值的时候，与之相关联的纹理单元必须被设置成深度比较纹理。否则，深度比较实际上不会被执行。</p>\n</blockquote>\n<h1 id=\"偏导数函数-Derivative-Functions\"><a href=\"#偏导数函数-Derivative-Functions\" class=\"headerlink\" title=\"偏导数函数(Derivative Functions)\"></a>偏导数函数(Derivative Functions)</h1><blockquote>\n<p> ddx(a)    </p>\n<blockquote>\n<p> 参数a对应一个像素位置,返回该像素再X轴上的偏导数</p>\n</blockquote>\n<p> ddy(a)    </p>\n<blockquote>\n<p> 参数a对应一个像素位置,返回该像素在Y轴上的偏导数</p>\n</blockquote>\n</blockquote>\n<h1 id=\"调试函数-Debugging-Function\"><a href=\"#调试函数-Debugging-Function\" class=\"headerlink\" title=\"调试函数(Debugging Function)\"></a>调试函数(Debugging Function)</h1><blockquote>\n<p> void debug(float4 x)    </p>\n<blockquote>\n<p> 如果在编译时设置了DEBUG，片段着 色程序中调用该函数可以将值x作为COLOR语义的最终输出；否则该函数什么也不做。</p>\n</blockquote>\n</blockquote>\n"},{"layout":"page","date":"2017-10-25T13:35:46.000Z","tags":null,"type":"unity","order":0,"_content":"","source":"unity/index.md","raw":"---\nlayout: page\ndate: 2017-10-25 21:35:46\ntags:\ntype: unity\norder: 0\n---\n","updated":"2017-10-27T08:59:20.000Z","path":"unity/index.html","title":"","comments":1,"_id":"cjajk6r5z00082t6u9oip9jb3","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"page","date":"2017-10-25T13:35:17.000Z","tags":null,"type":"vuforia","order":0,"_content":"","source":"vuforia/index.md","raw":"---\nlayout: page\ndate: 2017-10-25 21:35:17\ntags:\ntype: vuforia\norder: 0\n---","updated":"2017-10-27T08:59:20.000Z","path":"vuforia/index.html","title":"","comments":1,"_id":"cjajk6r6000092t6uuzji6rzd","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"page","title":"vuforia  Test","type":"vuforia","date":"2017-10-25T13:35:17.000Z","tags":null,"order":1,"_content":"aaaaaaa\n# dsas\n\ndasd \n\n### dfas三肯将空间看扫蛋壳框架空ajdkjsakdjk撒讲课尽快的dsa\n\ndasfgas","source":"vuforia/test.md","raw":"---\nlayout: page\ntitle: vuforia  Test\ntype: vuforia\ndate: 2017-10-25 21:35:17\ntags:\norder: 1\n---\naaaaaaa\n# dsas\n\ndasd \n\n### dfas三肯将空间看扫蛋壳框架空ajdkjsakdjk撒讲课尽快的dsa\n\ndasfgas","updated":"2017-10-27T08:59:20.000Z","path":"vuforia/test.html","comments":1,"_id":"cjajk6r60000a2t6udgyxjj80","content":"<p>aaaaaaa</p>\n<h1 id=\"dsas\"><a href=\"#dsas\" class=\"headerlink\" title=\"dsas\"></a>dsas</h1><p>dasd </p>\n<h3 id=\"dfas三肯将空间看扫蛋壳框架空ajdkjsakdjk撒讲课尽快的dsa\"><a href=\"#dfas三肯将空间看扫蛋壳框架空ajdkjsakdjk撒讲课尽快的dsa\" class=\"headerlink\" title=\"dfas三肯将空间看扫蛋壳框架空ajdkjsakdjk撒讲课尽快的dsa\"></a>dfas三肯将空间看扫蛋壳框架空ajdkjsakdjk撒讲课尽快的dsa</h3><p>dasfgas</p>\n","site":{"data":{}},"excerpt":"","more":"<p>aaaaaaa</p>\n<h1 id=\"dsas\"><a href=\"#dsas\" class=\"headerlink\" title=\"dsas\"></a>dsas</h1><p>dasd </p>\n<h3 id=\"dfas三肯将空间看扫蛋壳框架空ajdkjsakdjk撒讲课尽快的dsa\"><a href=\"#dfas三肯将空间看扫蛋壳框架空ajdkjsakdjk撒讲课尽快的dsa\" class=\"headerlink\" title=\"dfas三肯将空间看扫蛋壳框架空ajdkjsakdjk撒讲课尽快的dsa\"></a>dfas三肯将空间看扫蛋壳框架空ajdkjsakdjk撒讲课尽快的dsa</h3><p>dasfgas</p>\n"}],"Post":[],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}